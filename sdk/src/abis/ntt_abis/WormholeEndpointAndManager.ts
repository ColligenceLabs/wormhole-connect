/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi';
import type { Listener, Provider } from '@ethersproject/providers';
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from '../common';

export type NormalizedAmountStruct = {
  amount: BigNumberish;
  decimals: BigNumberish;
};

export type NormalizedAmountStructOutput = [BigNumber, number] & {
  amount: BigNumber;
  decimals: number;
};

export declare namespace EndpointStructs {
  export type EndpointMessageStruct = {
    sourceManagerAddress: BytesLike;
    managerPayload: BytesLike;
  };

  export type EndpointMessageStructOutput = [string, string] & {
    sourceManagerAddress: string;
    managerPayload: string;
  };
}

export declare namespace IRateLimiter {
  export type RateLimitParamsStruct = {
    limit: NormalizedAmountStruct;
    currentCapacity: NormalizedAmountStruct;
    lastTxTimestamp: BigNumberish;
  };

  export type RateLimitParamsStructOutput = [
    NormalizedAmountStructOutput,
    NormalizedAmountStructOutput,
    BigNumber,
  ] & {
    limit: NormalizedAmountStructOutput;
    currentCapacity: NormalizedAmountStructOutput;
    lastTxTimestamp: BigNumber;
  };

  export type InboundQueuedTransferStruct = {
    amount: NormalizedAmountStruct;
    txTimestamp: BigNumberish;
    recipient: string;
  };

  export type InboundQueuedTransferStructOutput = [
    NormalizedAmountStructOutput,
    BigNumber,
    string,
  ] & {
    amount: NormalizedAmountStructOutput;
    txTimestamp: BigNumber;
    recipient: string;
  };

  export type OutboundQueuedTransferStruct = {
    recipient: BytesLike;
    amount: NormalizedAmountStruct;
    txTimestamp: BigNumberish;
    recipientChain: BigNumberish;
    sender: string;
  };

  export type OutboundQueuedTransferStructOutput = [
    string,
    NormalizedAmountStructOutput,
    BigNumber,
    number,
    string,
  ] & {
    recipient: string;
    amount: NormalizedAmountStructOutput;
    txTimestamp: BigNumber;
    recipientChain: number;
    sender: string;
  };
}

export interface WormholeEndpointAndManagerInterface extends utils.Interface {
  functions: {
    'ENABLED_ENDPOINTS_SLOT()': FunctionFragment;
    'ENDPOINT_BITMAP_SLOT()': FunctionFragment;
    'ENDPOINT_INFOS_SLOT()': FunctionFragment;
    'GAS_LIMIT()': FunctionFragment;
    'INBOUND_LIMIT_PARAMS_SLOT()': FunctionFragment;
    'INBOUND_QUEUE_SLOT()': FunctionFragment;
    'MESSAGE_ATTESTATIONS_SLOT()': FunctionFragment;
    'MESSAGE_SEQUENCE_SLOT()': FunctionFragment;
    'MIGRATES_IMMUTABLES_SLOT()': FunctionFragment;
    'MIGRATING_SLOT()': FunctionFragment;
    'NUM_REGISTERED_ENDPOINTS_SLOT()': FunctionFragment;
    'OUTBOUND_LIMIT_PARAMS_SLOT()': FunctionFragment;
    'OUTBOUND_QUEUE_SLOT()': FunctionFragment;
    'PAUSE_SLOT()': FunctionFragment;
    'SIBLINGS_SLOT()': FunctionFragment;
    'WORMHOLE_CONSUMED_VAAS_SLOT()': FunctionFragment;
    'WORMHOLE_EVM_CHAIN_IDS()': FunctionFragment;
    'WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT()': FunctionFragment;
    'WORMHOLE_SIBLINGS_SLOT()': FunctionFragment;
    'chainId()': FunctionFragment;
    'completeInboundQueuedTransfer(bytes32)': FunctionFragment;
    'completeOutboundQueuedTransfer(uint64)': FunctionFragment;
    'evmChainId()': FunctionFragment;
    'getCurrentInboundCapacity(uint16)': FunctionFragment;
    'getCurrentOutboundCapacity()': FunctionFragment;
    'getEndpoints()': FunctionFragment;
    'getInboundLimitParams(uint16)': FunctionFragment;
    'getInboundQueuedTransfer(bytes32)': FunctionFragment;
    'getMigratesImmutables()': FunctionFragment;
    'getOutboundLimitParams()': FunctionFragment;
    'getOutboundQueuedTransfer(uint64)': FunctionFragment;
    'getSibling(uint16)': FunctionFragment;
    'getWormholeSibling(uint16)': FunctionFragment;
    'initialize()': FunctionFragment;
    'isMessageApproved(bytes32)': FunctionFragment;
    'isMessageExecuted(bytes32)': FunctionFragment;
    'isPaused()': FunctionFragment;
    'isVAAConsumed(bytes32)': FunctionFragment;
    'isWormholeEvmChain(uint16)': FunctionFragment;
    'isWormholeRelayingEnabled(uint16)': FunctionFragment;
    'migrate()': FunctionFragment;
    'mode()': FunctionFragment;
    'nextMessageSequence()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'quoteDeliveryPrice(uint16)': FunctionFragment;
    'rateLimitDuration()': FunctionFragment;
    'receiveMessage(bytes)': FunctionFragment;
    'receiveWormholeMessages(bytes,bytes[],bytes32,uint16,bytes32)': FunctionFragment;
    'renounceOwnership()': FunctionFragment;
    'setInboundLimit(uint256,uint16)': FunctionFragment;
    'setIsWormholeEvmChain(uint16)': FunctionFragment;
    'setIsWormholeRelayingEnabled(uint16,bool)': FunctionFragment;
    'setOutboundLimit(uint256)': FunctionFragment;
    'setSibling(uint16,bytes32)': FunctionFragment;
    'token()': FunctionFragment;
    'transfer(uint256,uint16,bytes32,bool)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'upgrade(address)': FunctionFragment;
    'wormhole()': FunctionFragment;
    'wormholeEndpoint_evmChainId()': FunctionFragment;
    'wormholeRelayer()': FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | 'ENABLED_ENDPOINTS_SLOT'
      | 'ENDPOINT_BITMAP_SLOT'
      | 'ENDPOINT_INFOS_SLOT'
      | 'GAS_LIMIT'
      | 'INBOUND_LIMIT_PARAMS_SLOT'
      | 'INBOUND_QUEUE_SLOT'
      | 'MESSAGE_ATTESTATIONS_SLOT'
      | 'MESSAGE_SEQUENCE_SLOT'
      | 'MIGRATES_IMMUTABLES_SLOT'
      | 'MIGRATING_SLOT'
      | 'NUM_REGISTERED_ENDPOINTS_SLOT'
      | 'OUTBOUND_LIMIT_PARAMS_SLOT'
      | 'OUTBOUND_QUEUE_SLOT'
      | 'PAUSE_SLOT'
      | 'SIBLINGS_SLOT'
      | 'WORMHOLE_CONSUMED_VAAS_SLOT'
      | 'WORMHOLE_EVM_CHAIN_IDS'
      | 'WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT'
      | 'WORMHOLE_SIBLINGS_SLOT'
      | 'chainId'
      | 'completeInboundQueuedTransfer'
      | 'completeOutboundQueuedTransfer'
      | 'evmChainId'
      | 'getCurrentInboundCapacity'
      | 'getCurrentOutboundCapacity'
      | 'getEndpoints'
      | 'getInboundLimitParams'
      | 'getInboundQueuedTransfer'
      | 'getMigratesImmutables'
      | 'getOutboundLimitParams'
      | 'getOutboundQueuedTransfer'
      | 'getSibling'
      | 'getWormholeSibling'
      | 'initialize'
      | 'isMessageApproved'
      | 'isMessageExecuted'
      | 'isPaused'
      | 'isVAAConsumed'
      | 'isWormholeEvmChain'
      | 'isWormholeRelayingEnabled'
      | 'migrate'
      | 'mode'
      | 'nextMessageSequence'
      | 'owner'
      | 'pause'
      | 'quoteDeliveryPrice'
      | 'rateLimitDuration'
      | 'receiveMessage'
      | 'receiveWormholeMessages'
      | 'renounceOwnership'
      | 'setInboundLimit'
      | 'setIsWormholeEvmChain'
      | 'setIsWormholeRelayingEnabled'
      | 'setOutboundLimit'
      | 'setSibling'
      | 'token'
      | 'transfer'
      | 'transferOwnership'
      | 'upgrade'
      | 'wormhole'
      | 'wormholeEndpoint_evmChainId'
      | 'wormholeRelayer',
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: 'ENABLED_ENDPOINTS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'ENDPOINT_BITMAP_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'ENDPOINT_INFOS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'GAS_LIMIT', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'INBOUND_LIMIT_PARAMS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'INBOUND_QUEUE_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MESSAGE_ATTESTATIONS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MESSAGE_SEQUENCE_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MIGRATES_IMMUTABLES_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'MIGRATING_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'NUM_REGISTERED_ENDPOINTS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'OUTBOUND_LIMIT_PARAMS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'OUTBOUND_QUEUE_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'PAUSE_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'SIBLINGS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'WORMHOLE_CONSUMED_VAAS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'WORMHOLE_EVM_CHAIN_IDS',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'WORMHOLE_SIBLINGS_SLOT',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'chainId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'completeInboundQueuedTransfer',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'completeOutboundQueuedTransfer',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'evmChainId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentInboundCapacity',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getCurrentOutboundCapacity',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getEndpoints',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getInboundLimitParams',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getInboundQueuedTransfer',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'getMigratesImmutables',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getOutboundLimitParams',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'getOutboundQueuedTransfer',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getSibling',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'getWormholeSibling',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'initialize',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'isMessageApproved',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isMessageExecuted',
    values: [BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'isPaused', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'isVAAConsumed',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'isWormholeEvmChain',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'isWormholeRelayingEnabled',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'migrate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mode', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'nextMessageSequence',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'quoteDeliveryPrice',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'rateLimitDuration',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveMessage',
    values: [BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'receiveWormholeMessages',
    values: [BytesLike, BytesLike[], BytesLike, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'renounceOwnership',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'setInboundLimit',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsWormholeEvmChain',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setIsWormholeRelayingEnabled',
    values: [BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'setOutboundLimit',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setSibling',
    values: [BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'token', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [BigNumberish, BigNumberish, BytesLike, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwnership',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'upgrade', values: [string]): string;
  encodeFunctionData(functionFragment: 'wormhole', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'wormholeEndpoint_evmChainId',
    values?: undefined,
  ): string;
  encodeFunctionData(
    functionFragment: 'wormholeRelayer',
    values?: undefined,
  ): string;

  decodeFunctionResult(
    functionFragment: 'ENABLED_ENDPOINTS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'ENDPOINT_BITMAP_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'ENDPOINT_INFOS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'GAS_LIMIT', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'INBOUND_LIMIT_PARAMS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'INBOUND_QUEUE_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MESSAGE_ATTESTATIONS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MESSAGE_SEQUENCE_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MIGRATES_IMMUTABLES_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'MIGRATING_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'NUM_REGISTERED_ENDPOINTS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'OUTBOUND_LIMIT_PARAMS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'OUTBOUND_QUEUE_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'PAUSE_SLOT', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'SIBLINGS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WORMHOLE_CONSUMED_VAAS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WORMHOLE_EVM_CHAIN_IDS',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'WORMHOLE_SIBLINGS_SLOT',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'chainId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'completeInboundQueuedTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'completeOutboundQueuedTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'evmChainId', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentInboundCapacity',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getCurrentOutboundCapacity',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getEndpoints',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getInboundLimitParams',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getInboundQueuedTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getMigratesImmutables',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOutboundLimitParams',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'getOutboundQueuedTransfer',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getSibling', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'getWormholeSibling',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'initialize', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isMessageApproved',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isMessageExecuted',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'isPaused', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'isVAAConsumed',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isWormholeEvmChain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'isWormholeRelayingEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'migrate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mode', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'nextMessageSequence',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'quoteDeliveryPrice',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'rateLimitDuration',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveMessage',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'receiveWormholeMessages',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'renounceOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setInboundLimit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIsWormholeEvmChain',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setIsWormholeRelayingEnabled',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setOutboundLimit',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setSibling', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwnership',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'upgrade', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'wormhole', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'wormholeEndpoint_evmChainId',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'wormholeRelayer',
    data: BytesLike,
  ): Result;

  events: {
    'AdminChanged(address,address)': EventFragment;
    'BeaconUpgraded(address)': EventFragment;
    'EndpointAdded(address)': EventFragment;
    'EndpointAdded(address,uint256,uint8)': EventFragment;
    'EndpointRemoved(address)': EventFragment;
    'EndpointRemoved(address,uint8)': EventFragment;
    'InboundTransferQueued(bytes32)': EventFragment;
    'Initialized(uint64)': EventFragment;
    'MessageAlreadyExecuted(bytes32,bytes32)': EventFragment;
    'MessageAttestedTo(bytes32,address,uint8)': EventFragment;
    'NotPaused(bool)': EventFragment;
    'OutboundTransferQueued(uint64)': EventFragment;
    'OutboundTransferRateLimited(address,uint64,uint256,uint256)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Paused(bool)': EventFragment;
    'ReceivedMessage(bytes32,uint16,bytes32,uint64)': EventFragment;
    'ReceivedRelayedMessage(bytes32,uint16,bytes32)': EventFragment;
    'SendEndpointMessage(uint16,(bytes32,bytes))': EventFragment;
    'SetIsWormholeEvmChain(uint16)': EventFragment;
    'SetIsWormholeRelayingEnabled(uint16,bool)': EventFragment;
    'SetWormholeSibling(uint16,bytes32,bytes32)': EventFragment;
    'SiblingUpdated(uint16,bytes32,bytes32)': EventFragment;
    'ThresholdChanged(uint8,uint8)': EventFragment;
    'TransferSent(bytes32,uint256,uint16,uint64)': EventFragment;
    'Upgraded(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'BeaconUpgraded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EndpointAdded(address)'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'EndpointAdded(address,uint256,uint8)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'EndpointRemoved(address)'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'EndpointRemoved(address,uint8)',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'InboundTransferQueued'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Initialized'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MessageAlreadyExecuted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MessageAttestedTo'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'NotPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OutboundTransferQueued'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'OutboundTransferRateLimited',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Paused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReceivedMessage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ReceivedRelayedMessage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SendEndpointMessage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetIsWormholeEvmChain'): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: 'SetIsWormholeRelayingEnabled',
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetWormholeSibling'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SiblingUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ThresholdChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferSent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Upgraded'): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface EndpointAdded_address_EventObject {
  endpoint: string;
}
export type EndpointAdded_address_Event = TypedEvent<
  [string],
  EndpointAdded_address_EventObject
>;

export type EndpointAdded_address_EventFilter =
  TypedEventFilter<EndpointAdded_address_Event>;

export interface EndpointAdded_address_uint256_uint8_EventObject {
  endpoint: string;
  endpointsNum: BigNumber;
  threshold: number;
}
export type EndpointAdded_address_uint256_uint8_Event = TypedEvent<
  [string, BigNumber, number],
  EndpointAdded_address_uint256_uint8_EventObject
>;

export type EndpointAdded_address_uint256_uint8_EventFilter =
  TypedEventFilter<EndpointAdded_address_uint256_uint8_Event>;

export interface EndpointRemoved_address_EventObject {
  endpoint: string;
}
export type EndpointRemoved_address_Event = TypedEvent<
  [string],
  EndpointRemoved_address_EventObject
>;

export type EndpointRemoved_address_EventFilter =
  TypedEventFilter<EndpointRemoved_address_Event>;

export interface EndpointRemoved_address_uint8_EventObject {
  endpoint: string;
  threshold: number;
}
export type EndpointRemoved_address_uint8_Event = TypedEvent<
  [string, number],
  EndpointRemoved_address_uint8_EventObject
>;

export type EndpointRemoved_address_uint8_EventFilter =
  TypedEventFilter<EndpointRemoved_address_uint8_Event>;

export interface InboundTransferQueuedEventObject {
  digest: string;
}
export type InboundTransferQueuedEvent = TypedEvent<
  [string],
  InboundTransferQueuedEventObject
>;

export type InboundTransferQueuedEventFilter =
  TypedEventFilter<InboundTransferQueuedEvent>;

export interface InitializedEventObject {
  version: BigNumber;
}
export type InitializedEvent = TypedEvent<[BigNumber], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface MessageAlreadyExecutedEventObject {
  sourceManager: string;
  msgHash: string;
}
export type MessageAlreadyExecutedEvent = TypedEvent<
  [string, string],
  MessageAlreadyExecutedEventObject
>;

export type MessageAlreadyExecutedEventFilter =
  TypedEventFilter<MessageAlreadyExecutedEvent>;

export interface MessageAttestedToEventObject {
  digest: string;
  endpoint: string;
  index: number;
}
export type MessageAttestedToEvent = TypedEvent<
  [string, string, number],
  MessageAttestedToEventObject
>;

export type MessageAttestedToEventFilter =
  TypedEventFilter<MessageAttestedToEvent>;

export interface NotPausedEventObject {
  notPaused: boolean;
}
export type NotPausedEvent = TypedEvent<[boolean], NotPausedEventObject>;

export type NotPausedEventFilter = TypedEventFilter<NotPausedEvent>;

export interface OutboundTransferQueuedEventObject {
  queueSequence: BigNumber;
}
export type OutboundTransferQueuedEvent = TypedEvent<
  [BigNumber],
  OutboundTransferQueuedEventObject
>;

export type OutboundTransferQueuedEventFilter =
  TypedEventFilter<OutboundTransferQueuedEvent>;

export interface OutboundTransferRateLimitedEventObject {
  sender: string;
  sequence: BigNumber;
  amount: BigNumber;
  currentCapacity: BigNumber;
}
export type OutboundTransferRateLimitedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  OutboundTransferRateLimitedEventObject
>;

export type OutboundTransferRateLimitedEventFilter =
  TypedEventFilter<OutboundTransferRateLimitedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  paused: boolean;
}
export type PausedEvent = TypedEvent<[boolean], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ReceivedMessageEventObject {
  digest: string;
  emitterChainId: number;
  emitterAddress: string;
  sequence: BigNumber;
}
export type ReceivedMessageEvent = TypedEvent<
  [string, number, string, BigNumber],
  ReceivedMessageEventObject
>;

export type ReceivedMessageEventFilter = TypedEventFilter<ReceivedMessageEvent>;

export interface ReceivedRelayedMessageEventObject {
  digest: string;
  emitterChainId: number;
  emitterAddress: string;
}
export type ReceivedRelayedMessageEvent = TypedEvent<
  [string, number, string],
  ReceivedRelayedMessageEventObject
>;

export type ReceivedRelayedMessageEventFilter =
  TypedEventFilter<ReceivedRelayedMessageEvent>;

export interface SendEndpointMessageEventObject {
  recipientChain: number;
  message: EndpointStructs.EndpointMessageStructOutput;
}
export type SendEndpointMessageEvent = TypedEvent<
  [number, EndpointStructs.EndpointMessageStructOutput],
  SendEndpointMessageEventObject
>;

export type SendEndpointMessageEventFilter =
  TypedEventFilter<SendEndpointMessageEvent>;

export interface SetIsWormholeEvmChainEventObject {
  chainId: number;
}
export type SetIsWormholeEvmChainEvent = TypedEvent<
  [number],
  SetIsWormholeEvmChainEventObject
>;

export type SetIsWormholeEvmChainEventFilter =
  TypedEventFilter<SetIsWormholeEvmChainEvent>;

export interface SetIsWormholeRelayingEnabledEventObject {
  chainId: number;
  isRelayingEnabled: boolean;
}
export type SetIsWormholeRelayingEnabledEvent = TypedEvent<
  [number, boolean],
  SetIsWormholeRelayingEnabledEventObject
>;

export type SetIsWormholeRelayingEnabledEventFilter =
  TypedEventFilter<SetIsWormholeRelayingEnabledEvent>;

export interface SetWormholeSiblingEventObject {
  chainId: number;
  oldSiblingContract: string;
  siblingContract: string;
}
export type SetWormholeSiblingEvent = TypedEvent<
  [number, string, string],
  SetWormholeSiblingEventObject
>;

export type SetWormholeSiblingEventFilter =
  TypedEventFilter<SetWormholeSiblingEvent>;

export interface SiblingUpdatedEventObject {
  chainId_: number;
  oldSiblingContract: string;
  siblingContract: string;
}
export type SiblingUpdatedEvent = TypedEvent<
  [number, string, string],
  SiblingUpdatedEventObject
>;

export type SiblingUpdatedEventFilter = TypedEventFilter<SiblingUpdatedEvent>;

export interface ThresholdChangedEventObject {
  oldThreshold: number;
  threshold: number;
}
export type ThresholdChangedEvent = TypedEvent<
  [number, number],
  ThresholdChangedEventObject
>;

export type ThresholdChangedEventFilter =
  TypedEventFilter<ThresholdChangedEvent>;

export interface TransferSentEventObject {
  recipient: string;
  amount: BigNumber;
  recipientChain: number;
  msgSequence: BigNumber;
}
export type TransferSentEvent = TypedEvent<
  [string, BigNumber, number, BigNumber],
  TransferSentEventObject
>;

export type TransferSentEventFilter = TypedEventFilter<TransferSentEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface WormholeEndpointAndManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: WormholeEndpointAndManagerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>,
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>,
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ENABLED_ENDPOINTS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    ENDPOINT_BITMAP_SLOT(overrides?: CallOverrides): Promise<[string]>;

    ENDPOINT_INFOS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    GAS_LIMIT(overrides?: CallOverrides): Promise<[BigNumber]>;

    INBOUND_LIMIT_PARAMS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    INBOUND_QUEUE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    MESSAGE_ATTESTATIONS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    MESSAGE_SEQUENCE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    MIGRATES_IMMUTABLES_SLOT(overrides?: CallOverrides): Promise<[string]>;

    MIGRATING_SLOT(overrides?: CallOverrides): Promise<[string]>;

    NUM_REGISTERED_ENDPOINTS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    OUTBOUND_LIMIT_PARAMS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    OUTBOUND_QUEUE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    PAUSE_SLOT(overrides?: CallOverrides): Promise<[string]>;

    SIBLINGS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    WORMHOLE_CONSUMED_VAAS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    WORMHOLE_EVM_CHAIN_IDS(overrides?: CallOverrides): Promise<[string]>;

    WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT(
      overrides?: CallOverrides,
    ): Promise<[string]>;

    WORMHOLE_SIBLINGS_SLOT(overrides?: CallOverrides): Promise<[string]>;

    chainId(overrides?: CallOverrides): Promise<[number]>;

    completeInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    completeOutboundQueuedTransfer(
      messageSequence: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCurrentInboundCapacity(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getCurrentOutboundCapacity(overrides?: CallOverrides): Promise<[BigNumber]>;

    getEndpoints(
      overrides?: CallOverrides,
    ): Promise<[string[]] & { result: string[] }>;

    getInboundLimitParams(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[IRateLimiter.RateLimitParamsStructOutput]>;

    getInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[IRateLimiter.InboundQueuedTransferStructOutput]>;

    getMigratesImmutables(overrides?: CallOverrides): Promise<[boolean]>;

    getOutboundLimitParams(
      overrides?: CallOverrides,
    ): Promise<[IRateLimiter.RateLimitParamsStructOutput]>;

    getOutboundQueuedTransfer(
      queueSequence: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[IRateLimiter.OutboundQueuedTransferStructOutput]>;

    getSibling(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getWormholeSibling(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    initialize(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    isMessageApproved(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isMessageExecuted(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isPaused(overrides?: CallOverrides): Promise<[boolean]>;

    isVAAConsumed(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    isWormholeRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    migrate(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    mode(overrides?: CallOverrides): Promise<[number]>;

    nextMessageSequence(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    quoteDeliveryPrice(
      recipientChain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[BigNumber[]]>;

    rateLimitDuration(overrides?: CallOverrides): Promise<[BigNumber]>;

    receiveMessage(
      encodedMessage: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    receiveWormholeMessages(
      payload: BytesLike,
      additionalMessages: BytesLike[],
      sourceAddress: BytesLike,
      sourceChain: BigNumberish,
      deliveryHash: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setInboundLimit(
      limit: BigNumberish,
      chainId_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setIsWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setIsWormholeRelayingEnabled(
      chainId: BigNumberish,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setOutboundLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    setSibling(
      siblingChainId: BigNumberish,
      siblingContract: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transfer(
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    upgrade(
      newImplementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<ContractTransaction>;

    wormhole(overrides?: CallOverrides): Promise<[string]>;

    wormholeEndpoint_evmChainId(
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    wormholeRelayer(overrides?: CallOverrides): Promise<[string]>;
  };

  ENABLED_ENDPOINTS_SLOT(overrides?: CallOverrides): Promise<string>;

  ENDPOINT_BITMAP_SLOT(overrides?: CallOverrides): Promise<string>;

  ENDPOINT_INFOS_SLOT(overrides?: CallOverrides): Promise<string>;

  GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

  INBOUND_LIMIT_PARAMS_SLOT(overrides?: CallOverrides): Promise<string>;

  INBOUND_QUEUE_SLOT(overrides?: CallOverrides): Promise<string>;

  MESSAGE_ATTESTATIONS_SLOT(overrides?: CallOverrides): Promise<string>;

  MESSAGE_SEQUENCE_SLOT(overrides?: CallOverrides): Promise<string>;

  MIGRATES_IMMUTABLES_SLOT(overrides?: CallOverrides): Promise<string>;

  MIGRATING_SLOT(overrides?: CallOverrides): Promise<string>;

  NUM_REGISTERED_ENDPOINTS_SLOT(overrides?: CallOverrides): Promise<string>;

  OUTBOUND_LIMIT_PARAMS_SLOT(overrides?: CallOverrides): Promise<string>;

  OUTBOUND_QUEUE_SLOT(overrides?: CallOverrides): Promise<string>;

  PAUSE_SLOT(overrides?: CallOverrides): Promise<string>;

  SIBLINGS_SLOT(overrides?: CallOverrides): Promise<string>;

  WORMHOLE_CONSUMED_VAAS_SLOT(overrides?: CallOverrides): Promise<string>;

  WORMHOLE_EVM_CHAIN_IDS(overrides?: CallOverrides): Promise<string>;

  WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT(
    overrides?: CallOverrides,
  ): Promise<string>;

  WORMHOLE_SIBLINGS_SLOT(overrides?: CallOverrides): Promise<string>;

  chainId(overrides?: CallOverrides): Promise<number>;

  completeInboundQueuedTransfer(
    digest: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  completeOutboundQueuedTransfer(
    messageSequence: BigNumberish,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

  getCurrentInboundCapacity(
    chainId_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getCurrentOutboundCapacity(overrides?: CallOverrides): Promise<BigNumber>;

  getEndpoints(overrides?: CallOverrides): Promise<string[]>;

  getInboundLimitParams(
    chainId_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<IRateLimiter.RateLimitParamsStructOutput>;

  getInboundQueuedTransfer(
    digest: BytesLike,
    overrides?: CallOverrides,
  ): Promise<IRateLimiter.InboundQueuedTransferStructOutput>;

  getMigratesImmutables(overrides?: CallOverrides): Promise<boolean>;

  getOutboundLimitParams(
    overrides?: CallOverrides,
  ): Promise<IRateLimiter.RateLimitParamsStructOutput>;

  getOutboundQueuedTransfer(
    queueSequence: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<IRateLimiter.OutboundQueuedTransferStructOutput>;

  getSibling(
    chainId_: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getWormholeSibling(
    chainId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  initialize(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  isMessageApproved(
    digest: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isMessageExecuted(
    digest: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isPaused(overrides?: CallOverrides): Promise<boolean>;

  isVAAConsumed(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  isWormholeEvmChain(
    chainId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  isWormholeRelayingEnabled(
    chainId: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  migrate(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  mode(overrides?: CallOverrides): Promise<number>;

  nextMessageSequence(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  quoteDeliveryPrice(
    recipientChain: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<BigNumber[]>;

  rateLimitDuration(overrides?: CallOverrides): Promise<BigNumber>;

  receiveMessage(
    encodedMessage: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  receiveWormholeMessages(
    payload: BytesLike,
    additionalMessages: BytesLike[],
    sourceAddress: BytesLike,
    sourceChain: BigNumberish,
    deliveryHash: BytesLike,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setInboundLimit(
    limit: BigNumberish,
    chainId_: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setIsWormholeEvmChain(
    chainId: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setIsWormholeRelayingEnabled(
    chainId: BigNumberish,
    isEnabled: boolean,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setOutboundLimit(
    limit: BigNumberish,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  setSibling(
    siblingChainId: BigNumberish,
    siblingContract: BytesLike,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transfer(
    amount: BigNumberish,
    recipientChain: BigNumberish,
    recipient: BytesLike,
    shouldQueue: boolean,
    overrides?: PayableOverrides & { from?: string },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  upgrade(
    newImplementation: string,
    overrides?: Overrides & { from?: string },
  ): Promise<ContractTransaction>;

  wormhole(overrides?: CallOverrides): Promise<string>;

  wormholeEndpoint_evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

  wormholeRelayer(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    ENABLED_ENDPOINTS_SLOT(overrides?: CallOverrides): Promise<string>;

    ENDPOINT_BITMAP_SLOT(overrides?: CallOverrides): Promise<string>;

    ENDPOINT_INFOS_SLOT(overrides?: CallOverrides): Promise<string>;

    GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    INBOUND_LIMIT_PARAMS_SLOT(overrides?: CallOverrides): Promise<string>;

    INBOUND_QUEUE_SLOT(overrides?: CallOverrides): Promise<string>;

    MESSAGE_ATTESTATIONS_SLOT(overrides?: CallOverrides): Promise<string>;

    MESSAGE_SEQUENCE_SLOT(overrides?: CallOverrides): Promise<string>;

    MIGRATES_IMMUTABLES_SLOT(overrides?: CallOverrides): Promise<string>;

    MIGRATING_SLOT(overrides?: CallOverrides): Promise<string>;

    NUM_REGISTERED_ENDPOINTS_SLOT(overrides?: CallOverrides): Promise<string>;

    OUTBOUND_LIMIT_PARAMS_SLOT(overrides?: CallOverrides): Promise<string>;

    OUTBOUND_QUEUE_SLOT(overrides?: CallOverrides): Promise<string>;

    PAUSE_SLOT(overrides?: CallOverrides): Promise<string>;

    SIBLINGS_SLOT(overrides?: CallOverrides): Promise<string>;

    WORMHOLE_CONSUMED_VAAS_SLOT(overrides?: CallOverrides): Promise<string>;

    WORMHOLE_EVM_CHAIN_IDS(overrides?: CallOverrides): Promise<string>;

    WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT(
      overrides?: CallOverrides,
    ): Promise<string>;

    WORMHOLE_SIBLINGS_SLOT(overrides?: CallOverrides): Promise<string>;

    chainId(overrides?: CallOverrides): Promise<number>;

    completeInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    completeOutboundQueuedTransfer(
      messageSequence: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentInboundCapacity(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentOutboundCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    getEndpoints(overrides?: CallOverrides): Promise<string[]>;

    getInboundLimitParams(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<IRateLimiter.RateLimitParamsStructOutput>;

    getInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<IRateLimiter.InboundQueuedTransferStructOutput>;

    getMigratesImmutables(overrides?: CallOverrides): Promise<boolean>;

    getOutboundLimitParams(
      overrides?: CallOverrides,
    ): Promise<IRateLimiter.RateLimitParamsStructOutput>;

    getOutboundQueuedTransfer(
      queueSequence: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<IRateLimiter.OutboundQueuedTransferStructOutput>;

    getSibling(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getWormholeSibling(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    initialize(overrides?: CallOverrides): Promise<void>;

    isMessageApproved(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isMessageExecuted(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isPaused(overrides?: CallOverrides): Promise<boolean>;

    isVAAConsumed(hash: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    isWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    isWormholeRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    migrate(overrides?: CallOverrides): Promise<void>;

    mode(overrides?: CallOverrides): Promise<number>;

    nextMessageSequence(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    quoteDeliveryPrice(
      recipientChain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber[]>;

    rateLimitDuration(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMessage(
      encodedMessage: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    receiveWormholeMessages(
      payload: BytesLike,
      additionalMessages: BytesLike[],
      sourceAddress: BytesLike,
      sourceChain: BigNumberish,
      deliveryHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setInboundLimit(
      limit: BigNumberish,
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setIsWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setIsWormholeRelayingEnabled(
      chainId: BigNumberish,
      isEnabled: boolean,
      overrides?: CallOverrides,
    ): Promise<void>;

    setOutboundLimit(
      limit: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setSibling(
      siblingChainId: BigNumberish,
      siblingContract: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transfer(
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    upgrade(
      newImplementation: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    wormhole(overrides?: CallOverrides): Promise<string>;

    wormholeEndpoint_evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    wormholeRelayer(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'AdminChanged(address,address)'(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null,
    ): AdminChangedEventFilter;

    'BeaconUpgraded(address)'(
      beacon?: string | null,
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(beacon?: string | null): BeaconUpgradedEventFilter;

    'EndpointAdded(address)'(
      endpoint?: null,
    ): EndpointAdded_address_EventFilter;
    'EndpointAdded(address,uint256,uint8)'(
      endpoint?: null,
      endpointsNum?: null,
      threshold?: null,
    ): EndpointAdded_address_uint256_uint8_EventFilter;
    'EndpointRemoved(address)'(
      endpoint?: null,
    ): EndpointRemoved_address_EventFilter;
    'EndpointRemoved(address,uint8)'(
      endpoint?: null,
      threshold?: null,
    ): EndpointRemoved_address_uint8_EventFilter;

    'InboundTransferQueued(bytes32)'(
      digest?: null,
    ): InboundTransferQueuedEventFilter;
    InboundTransferQueued(digest?: null): InboundTransferQueuedEventFilter;

    'Initialized(uint64)'(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    'MessageAlreadyExecuted(bytes32,bytes32)'(
      sourceManager?: BytesLike | null,
      msgHash?: BytesLike | null,
    ): MessageAlreadyExecutedEventFilter;
    MessageAlreadyExecuted(
      sourceManager?: BytesLike | null,
      msgHash?: BytesLike | null,
    ): MessageAlreadyExecutedEventFilter;

    'MessageAttestedTo(bytes32,address,uint8)'(
      digest?: null,
      endpoint?: null,
      index?: null,
    ): MessageAttestedToEventFilter;
    MessageAttestedTo(
      digest?: null,
      endpoint?: null,
      index?: null,
    ): MessageAttestedToEventFilter;

    'NotPaused(bool)'(notPaused?: null): NotPausedEventFilter;
    NotPaused(notPaused?: null): NotPausedEventFilter;

    'OutboundTransferQueued(uint64)'(
      queueSequence?: null,
    ): OutboundTransferQueuedEventFilter;
    OutboundTransferQueued(
      queueSequence?: null,
    ): OutboundTransferQueuedEventFilter;

    'OutboundTransferRateLimited(address,uint64,uint256,uint256)'(
      sender?: string | null,
      sequence?: null,
      amount?: null,
      currentCapacity?: null,
    ): OutboundTransferRateLimitedEventFilter;
    OutboundTransferRateLimited(
      sender?: string | null,
      sequence?: null,
      amount?: null,
      currentCapacity?: null,
    ): OutboundTransferRateLimitedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Paused(bool)'(paused?: null): PausedEventFilter;
    Paused(paused?: null): PausedEventFilter;

    'ReceivedMessage(bytes32,uint16,bytes32,uint64)'(
      digest?: null,
      emitterChainId?: null,
      emitterAddress?: null,
      sequence?: null,
    ): ReceivedMessageEventFilter;
    ReceivedMessage(
      digest?: null,
      emitterChainId?: null,
      emitterAddress?: null,
      sequence?: null,
    ): ReceivedMessageEventFilter;

    'ReceivedRelayedMessage(bytes32,uint16,bytes32)'(
      digest?: null,
      emitterChainId?: null,
      emitterAddress?: null,
    ): ReceivedRelayedMessageEventFilter;
    ReceivedRelayedMessage(
      digest?: null,
      emitterChainId?: null,
      emitterAddress?: null,
    ): ReceivedRelayedMessageEventFilter;

    'SendEndpointMessage(uint16,(bytes32,bytes))'(
      recipientChain?: null,
      message?: null,
    ): SendEndpointMessageEventFilter;
    SendEndpointMessage(
      recipientChain?: null,
      message?: null,
    ): SendEndpointMessageEventFilter;

    'SetIsWormholeEvmChain(uint16)'(
      chainId?: null,
    ): SetIsWormholeEvmChainEventFilter;
    SetIsWormholeEvmChain(chainId?: null): SetIsWormholeEvmChainEventFilter;

    'SetIsWormholeRelayingEnabled(uint16,bool)'(
      chainId?: null,
      isRelayingEnabled?: null,
    ): SetIsWormholeRelayingEnabledEventFilter;
    SetIsWormholeRelayingEnabled(
      chainId?: null,
      isRelayingEnabled?: null,
    ): SetIsWormholeRelayingEnabledEventFilter;

    'SetWormholeSibling(uint16,bytes32,bytes32)'(
      chainId?: null,
      oldSiblingContract?: null,
      siblingContract?: null,
    ): SetWormholeSiblingEventFilter;
    SetWormholeSibling(
      chainId?: null,
      oldSiblingContract?: null,
      siblingContract?: null,
    ): SetWormholeSiblingEventFilter;

    'SiblingUpdated(uint16,bytes32,bytes32)'(
      chainId_?: BigNumberish | null,
      oldSiblingContract?: null,
      siblingContract?: null,
    ): SiblingUpdatedEventFilter;
    SiblingUpdated(
      chainId_?: BigNumberish | null,
      oldSiblingContract?: null,
      siblingContract?: null,
    ): SiblingUpdatedEventFilter;

    'ThresholdChanged(uint8,uint8)'(
      oldThreshold?: null,
      threshold?: null,
    ): ThresholdChangedEventFilter;
    ThresholdChanged(
      oldThreshold?: null,
      threshold?: null,
    ): ThresholdChangedEventFilter;

    'TransferSent(bytes32,uint256,uint16,uint64)'(
      recipient?: null,
      amount?: null,
      recipientChain?: null,
      msgSequence?: null,
    ): TransferSentEventFilter;
    TransferSent(
      recipient?: null,
      amount?: null,
      recipientChain?: null,
      msgSequence?: null,
    ): TransferSentEventFilter;

    'Upgraded(address)'(implementation?: string | null): UpgradedEventFilter;
    Upgraded(implementation?: string | null): UpgradedEventFilter;
  };

  estimateGas: {
    ENABLED_ENDPOINTS_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    ENDPOINT_BITMAP_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    ENDPOINT_INFOS_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    GAS_LIMIT(overrides?: CallOverrides): Promise<BigNumber>;

    INBOUND_LIMIT_PARAMS_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    INBOUND_QUEUE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    MESSAGE_ATTESTATIONS_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    MESSAGE_SEQUENCE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    MIGRATES_IMMUTABLES_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    MIGRATING_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    NUM_REGISTERED_ENDPOINTS_SLOT(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    OUTBOUND_LIMIT_PARAMS_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    OUTBOUND_QUEUE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    PAUSE_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    SIBLINGS_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    WORMHOLE_CONSUMED_VAAS_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    WORMHOLE_EVM_CHAIN_IDS(overrides?: CallOverrides): Promise<BigNumber>;

    WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT(
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    WORMHOLE_SIBLINGS_SLOT(overrides?: CallOverrides): Promise<BigNumber>;

    chainId(overrides?: CallOverrides): Promise<BigNumber>;

    completeInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    completeOutboundQueuedTransfer(
      messageSequence: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getCurrentInboundCapacity(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getCurrentOutboundCapacity(overrides?: CallOverrides): Promise<BigNumber>;

    getEndpoints(overrides?: CallOverrides): Promise<BigNumber>;

    getInboundLimitParams(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getMigratesImmutables(overrides?: CallOverrides): Promise<BigNumber>;

    getOutboundLimitParams(overrides?: CallOverrides): Promise<BigNumber>;

    getOutboundQueuedTransfer(
      queueSequence: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getSibling(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getWormholeSibling(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    initialize(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    isMessageApproved(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isMessageExecuted(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isPaused(overrides?: CallOverrides): Promise<BigNumber>;

    isVAAConsumed(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    isWormholeRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    migrate(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    mode(overrides?: CallOverrides): Promise<BigNumber>;

    nextMessageSequence(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    quoteDeliveryPrice(
      recipientChain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    rateLimitDuration(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMessage(
      encodedMessage: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    receiveWormholeMessages(
      payload: BytesLike,
      additionalMessages: BytesLike[],
      sourceAddress: BytesLike,
      sourceChain: BigNumberish,
      deliveryHash: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setInboundLimit(
      limit: BigNumberish,
      chainId_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setIsWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setIsWormholeRelayingEnabled(
      chainId: BigNumberish,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setOutboundLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    setSibling(
      siblingChainId: BigNumberish,
      siblingContract: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    upgrade(
      newImplementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<BigNumber>;

    wormhole(overrides?: CallOverrides): Promise<BigNumber>;

    wormholeEndpoint_evmChainId(overrides?: CallOverrides): Promise<BigNumber>;

    wormholeRelayer(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ENABLED_ENDPOINTS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ENDPOINT_BITMAP_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    ENDPOINT_INFOS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    GAS_LIMIT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INBOUND_LIMIT_PARAMS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    INBOUND_QUEUE_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MESSAGE_ATTESTATIONS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MESSAGE_SEQUENCE_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MIGRATES_IMMUTABLES_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    MIGRATING_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NUM_REGISTERED_ENDPOINTS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    OUTBOUND_LIMIT_PARAMS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    OUTBOUND_QUEUE_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    PAUSE_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SIBLINGS_SLOT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WORMHOLE_CONSUMED_VAAS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    WORMHOLE_EVM_CHAIN_IDS(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    WORMHOLE_RELAYING_ENABLED_CHAINS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    WORMHOLE_SIBLINGS_SLOT(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    chainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    completeInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    completeOutboundQueuedTransfer(
      messageSequence: BigNumberish,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    evmChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCurrentInboundCapacity(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getCurrentOutboundCapacity(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getEndpoints(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getInboundLimitParams(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getInboundQueuedTransfer(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getMigratesImmutables(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOutboundLimitParams(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOutboundQueuedTransfer(
      queueSequence: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getSibling(
      chainId_: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getWormholeSibling(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    initialize(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    isMessageApproved(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isMessageExecuted(
      digest: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isVAAConsumed(
      hash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isWormholeRelayingEnabled(
      chainId: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    migrate(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    mode(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextMessageSequence(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    quoteDeliveryPrice(
      recipientChain: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    rateLimitDuration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveMessage(
      encodedMessage: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    receiveWormholeMessages(
      payload: BytesLike,
      additionalMessages: BytesLike[],
      sourceAddress: BytesLike,
      sourceChain: BigNumberish,
      deliveryHash: BytesLike,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setInboundLimit(
      limit: BigNumberish,
      chainId_: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setIsWormholeEvmChain(
      chainId: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setIsWormholeRelayingEnabled(
      chainId: BigNumberish,
      isEnabled: boolean,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setOutboundLimit(
      limit: BigNumberish,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    setSibling(
      siblingChainId: BigNumberish,
      siblingContract: BytesLike,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      amount: BigNumberish,
      recipientChain: BigNumberish,
      recipient: BytesLike,
      shouldQueue: boolean,
      overrides?: PayableOverrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    upgrade(
      newImplementation: string,
      overrides?: Overrides & { from?: string },
    ): Promise<PopulatedTransaction>;

    wormhole(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    wormholeEndpoint_evmChainId(
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    wormholeRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
